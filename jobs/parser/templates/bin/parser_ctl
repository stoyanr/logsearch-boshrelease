#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/parser/helpers/ctl_setup.sh 'parser'

export PORT=${PORT:-5000}
export LANG=en_US.UTF-8
<% if 'auto' == p('logstash_parser.workers') %>
# 1 logstash worker / CPU core
export LOGSTASH_WORKERS=`grep -c ^processor /proc/cpuinfo`
<% else %>
export LOGSTASH_WORKERS=<%= p('logstash_parser.workers') %>
<% end %>
export TIMECOP_REJECT_GREATER_THAN_HOURS=<%= p('logstash_parser.timecop.reject_greater_than_hours') %>
export TIMECOP_REJECT_LESS_THAN_HOURS=<%= p('logstash_parser.timecop.reject_less_than_hours') %>

case $1 in

  start)
    pid_guard $PIDFILE $JOB_NAME

    # store this processes pid in $PIDFILE, since the exec below doesn't daemonize
    echo $$ > $PIDFILE

    # construct a complete config file from all the fragments
    cat ${JOB_DIR}/config/input_and_output.conf > ${JOB_DIR}/config/logstash.conf

    echo "filter {" >> ${JOB_DIR}/config/logstash.conf

    # logstash_parser.filters is a list of filter rules
    <% p('logstash_parser.filters').each do |filter| %>
      <% if filter['type'] == 'config' %>
        cat "${JOB_DIR}/config/<%= filter['filter'] %>" >> ${JOB_DIR}/config/logstash.conf
      <% elsif filter['type'] == 'path' %>
        cat "<%= filter['filter'] %>" >> ${JOB_DIR}/config/logstash.conf
      <% elsif filter['type'] == 'text' %>
        cat >> ${JOB_DIR}/config/logstash.conf <<EOL
<%= filter['filter'] %>
EOL
      <% end %>
    <% end %>

    echo "} #close filters" >> ${JOB_DIR}/config/logstash.conf

    exec chpst -u vcap /var/vcap/packages/logstash/bin/logstash agent \
         -f ${JOB_DIR}/config/logstash.conf -w ${LOGSTASH_WORKERS} \
         >>$LOG_DIR/$JOB_NAME.stdout.log \
         2>>$LOG_DIR/$JOB_NAME.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;
  *)
    echo "Usage: ingestor_syslog_ctl {start|stop}"

    ;;

esac
exit 0
